{"version":3,"sources":["webpack:///./src/components/listing-summary.js","webpack:///./src/components/templates/listing-list.js","webpack:///./src/components/layouts/standalone.js","webpack:///./src/components/seo.js"],"names":["ListingSummary","_ref","title","description","url","icons","react_default","a","createElement","className","gatsby_browser_entry","to","map","ic","idx","category_icon","icon","name","path","key","ListingList","data","_data$thisCategory$fr","thisCategory","frontmatter","type","tag","commonKeywords","site","siteMetadata","listings","edges","edge","node","allCategories","categories","standalone","seo","keywords","concat","filter","_ref2","tags","indexOf","i","listingIcons","tg","find","catNode","fields","slug","listing_summary","pageQuery","Standalone","children","react__WEBPACK_IMPORTED_MODULE_1___default","gatsby__WEBPACK_IMPORTED_MODULE_3__","query","render","Fragment","_header__WEBPACK_IMPORTED_MODULE_2__","showTitle","siteTitle","_footer__WEBPACK_IMPORTED_MODULE_4__","_public_static_d_1948935994_json__WEBPACK_IMPORTED_MODULE_0__","SEO","lang","meta","gatsby__WEBPACK_IMPORTED_MODULE_4__","detailsQuery","metaDescription","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","content","property","author","length","join","_public_static_d_1025518380_json__WEBPACK_IMPORTED_MODULE_0__","defaultProps","propTypes","PropTypes","string","array","arrayOf","isRequired"],"mappings":"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","file":"component---src-components-templates-listing-list-js-3a5f1bba80d0bb419d99.js","sourcesContent":["import React from 'react';\nimport { Link } from 'gatsby'\nimport CategoryIcon from './category-icon'\n\nconst ListingSummary = ({title, description, url, icons}) => (\n  <div className=\"row listing\">\n    <div className=\"col-md\">\n      <div className=\"card mb-3\">\n        <div className=\"card-body\">\n          <h5 className=\"card-title title--header dark small\"><Link className=\"link\" to={url}>{ title }</Link></h5>\n          <p className=\"card-text\">{ description }</p>\n          <p>\n            {\n              icons && icons.map((ic, idx) => (\n                <CategoryIcon icon={ic.icon} name={ic.name} path={ic.path} key={idx}/>\n              ))\n            }\n          </p>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nexport default ListingSummary;","import React from 'react';\nimport Standalone from '../layouts/standalone';\nimport SEO from '../seo';\nimport ListingSummary from '../listing-summary';\nimport { graphql} from 'gatsby';\n\nconst ListingList = ({ data }) => {\n  const { type, name, tag } = data.thisCategory.frontmatter;\n  const { commonKeywords } = data.site.siteMetadata;\n  const listings = data.listings.edges.map(edge => edge.node);\n  const allCategories = data.categories.edges.map(edge => edge.node);\n  return (\n    <Standalone>\n      <SEO\n        title={ `Expatty ${ type === 'category' ? 'category' : 'areas'} | ${name}` }\n        description={ `Attractions, events, businesses and services in Andalusia, Spain, related to: ${name}` }\n        keywords={[name, ...commonKeywords]}/>\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          <div className=\"col-md\">\n            <main>\n              <h1 className=\"title--header\">{ name }</h1>\n              {\n                listings\n                  .filter(({ frontmatter }) => frontmatter.tags.indexOf(tag) >= 0)\n                  .map((node, i) => {\n                    const listingIcons =\n                      node.frontmatter.tags\n                        .map(tg => allCategories.find(catNode => catNode.frontmatter.tag === tg))\n                        .filter(catNode => catNode)\n                        .map(catNode => ({\n                          icon: catNode.frontmatter.icon,\n                          name: catNode.frontmatter.name,\n                          path: catNode.fields.slug\n                        }));\n                    return (\n                    <ListingSummary\n                      key={ i }\n                      description={ node.frontmatter.description }\n                      title={ node.frontmatter.title }\n                      url={ node.fields.slug }\n                      icons={ listingIcons }/>\n                  )\n                })\n              }\n            </main>\n          </div>\n        </div>\n      </div>\n    </Standalone>\n  );\n};\n\nexport default ListingList;\n\nexport const pageQuery = graphql`\n    query CategoryOrArea($type: String!, $name: String!) {\n        site {\n            siteMetadata {\n                commonKeywords\n            }\n        }\n        thisCategory: markdownRemark(frontmatter: { type: { eq: $type }, name: { eq: $name } }) {\n            frontmatter {\n                type\n                name\n                tag\n            }\n        }\n        listings: allMarkdownRemark(filter: {frontmatter: {type: {eq: \"listing\"}}}) {\n            edges {\n                node {\n                    frontmatter {\n                        title\n                        description\n                        tags\n                    }\n                    fields {\n                        slug\n                    }\n                }\n            }\n        }\n        categories: allMarkdownRemark(filter: {frontmatter: {type: {eq: \"category\"}}}) {\n            edges {\n                node {\n                    frontmatter {\n                        tag\n                        name\n                        icon\n                    }\n                    fields {\n                        slug\n                    }\n                }\n            }\n        }\n    }\n`","import React from 'react';\nimport Header from '../header'\nimport { graphql, StaticQuery } from 'gatsby'\nimport Footer from '../footer'\n\nconst Standalone = ({children}) => (\n  <StaticQuery query={graphql`\n      query SiteTitleQuery2 {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n  render={data => (\n    <>\n      <Header showTitle={true} siteTitle={data.site.siteMetadata.title} />\n      {children}\n      <Footer />\n    </>\n    )}\n  />\n);\n\nexport default Standalone;","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  return (\n    <StaticQuery\n      query={detailsQuery}\n      render={data => {\n        const metaDescription =\n          description || data.site.siteMetadata.description\n        return (\n          <Helmet\n            htmlAttributes={{\n              lang,\n            }}\n            title={title}\n            titleTemplate={`%s | ${data.site.siteMetadata.title}`}\n            meta={[\n              {\n                name: `description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:title`,\n                content: title,\n              },\n              {\n                property: `og:description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:type`,\n                content: `website`,\n              },\n              {\n                name: `twitter:card`,\n                content: `summary`,\n              },\n              {\n                name: `twitter:creator`,\n                content: data.site.siteMetadata.author,\n              },\n              {\n                name: `twitter:title`,\n                content: title,\n              },\n              {\n                name: `twitter:description`,\n                content: metaDescription,\n              },\n            ]\n              .concat(\n                keywords.length > 0\n                  ? {\n                      name: `keywords`,\n                      content: keywords.join(`, `),\n                    }\n                  : []\n              )\n              .concat(meta)}\n          />\n        )\n      }}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n\nconst detailsQuery = graphql`\n  query DefaultSEOQuery {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n  }\n`\n"],"sourceRoot":""}